name: BAYSCOM ERP CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Frontend Testing and Building
  frontend-react:
    name: React Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./bayscom-react-frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './bayscom-react-frontend/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run build 2>&1 | grep -E "(warning|error)" || true

    - name: Run tests
      run: npm test -- --coverage --watchAll=false

    - name: Build production
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: react-build
        path: ./bayscom-react-frontend/build/
        retention-days: 7

  # Next.js Oil & Gas App
  frontend-nextjs:
    name: Next.js Oil & Gas CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./bayscom-oil-gas

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './bayscom-oil-gas/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript check
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nextjs-build
        path: ./bayscom-oil-gas/.next/
        retention-days: 7

  # Django Backend Testing
  backend-django:
    name: Django Backend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./bayscom-django-erp

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Django migrations
      run: |
        python manage.py migrate --settings=bayscom_erp.settings

    - name: Run Django tests
      run: |
        python manage.py test --settings=bayscom_erp.settings

    - name: Run Django check
      run: |
        python manage.py check --settings=bayscom_erp.settings

    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput --settings=bayscom_erp.settings

  # Security and Quality Checks
  security-scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    needs: [frontend-react, backend-django]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit (React)
      working-directory: ./bayscom-react-frontend
      run: |
        npm audit --audit-level=high
      continue-on-error: true

    - name: Run npm audit (Next.js)
      working-directory: ./bayscom-oil-gas
      run: |
        npm audit --audit-level=high
      continue-on-error: true

    - name: Setup Python for security scan
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install safety
      run: pip install safety

    - name: Run Python security scan
      working-directory: ./bayscom-django-erp
      run: |
        safety check -r requirements.txt
      continue-on-error: true

  # Deployment to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-react, frontend-nextjs, backend-django, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download React build artifacts
      uses: actions/download-artifact@v3
      with:
        name: react-build
        path: ./react-build/

    - name: Download Next.js build artifacts
      uses: actions/download-artifact@v3
      with:
        name: nextjs-build
        path: ./nextjs-build/

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "React build size: $(du -sh ./react-build/ | cut -f1)"
        echo "Next.js build size: $(du -sh ./nextjs-build/ | cut -f1)"
        # Add your staging deployment commands here
        # Example: rsync, docker build & push, or cloud provider CLI

  # Production deployment (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-react, frontend-nextjs, backend-django, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download React build artifacts
      uses: actions/download-artifact@v3
      with:
        name: react-build
        path: ./react-build/

    - name: Download Next.js build artifacts
      uses: actions/download-artifact@v3
      with:
        name: nextjs-build
        path: ./nextjs-build/

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying BAYSCOM ERP to production..."
        echo "React build size: $(du -sh ./react-build/ | cut -f1)"
        echo "Next.js build size: $(du -sh ./nextjs-build/ | cut -f1)"
        # Add your production deployment commands here
        # Example: docker build & push, kubernetes deployment, or cloud provider CLI

  # Notification on completion
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
      run: |
        echo "‚úÖ BAYSCOM ERP deployment completed successfully!"
        # Add notification logic here (Slack, email, etc.)

    - name: Notify failure
      if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
      run: |
        echo "‚ùå BAYSCOM ERP deployment failed!"
        # Add notification logic here (Slack, email, etc.)
